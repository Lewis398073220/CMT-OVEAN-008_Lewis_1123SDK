// Copyright 2019 Google LLC.
#ifndef GSOUND_TARGET_BATA_H
#define GSOUND_TARGET_BATA_H

#ifdef __cplusplus
extern "C" {
#endif

/**
 * This header file was generated by Google GSound Services,
 * it should not be altered in any way. Please treat this as
 * a read-only file.
 *
 * Each function listed below must
 * be implemented for each specific
 * platform / SDK
 *
 */
#include "gsound.h"

#define GSOUND_BATA_MSG_GROUP (15)

/**
 * The GSound BATA header contains two big endian 16 bit unsigned
 * integers:
 *  * message ID (message group and message type)
 *  * payload length in bytes
 *  it is 4 bytes:
 *     0: message group for BATA (GSOUND_BATA_MSG_GROUP)
 *     1: message type (BataMessageType defined in bata.proto)
 *     2: most  significant byte of payload length
 *     3: least significant byte of payload length
 */
#define GSOUND_BATA_HEADER_LENGTH (4)

/**
 * Following declares the standard BATA
 * Interface API.
 */
typedef struct {


  /**
   * Target should call this after receiving any message over UART. If
   * `out_handled` is set to true, the target must not try to handle the
   * message. If `out_handled` is set to false, the target must try to handle
   * the message.
   *
   * param[in] msg_id:       two byte message ID (not including the size)
   *
   * param[in] payload:      pointer to payload (not including 4 byte header)
   *
   * param[in] payload_len:  length of payload pointed to by data
   *
   * param[out] out_handled: if set to true, target must not try to handle
   *                         this message.
   *                         if set to false, target must try to handle this
   *                         message
   *
   * return: GSOUND_STATUS_OK on success, otherwise an error occurred.
   */
  GSoundStatus (*gsound_bata_msg_rx)(uint16_t msg_id,
                                     const uint8_t *payload,
                                     uint16_t payload_len,
                                     bool     *out_handled);

  /**
   * Target should call this after receiving any message over UART that is 
   * in the GSoundTargetBataMsgId enum that is handled but does not specify
   * another callback to call with a payload.
   */
  GSoundStatus (*gsound_bata_msg_handled)(uint16_t msg_id, GSoundStatus status);

  /**
   * Target should call this after receiving any message over UART that is not
   * in GSoundTargetBataMsgId.
   */
  GSoundStatus (*gsound_bata_unhandled_msg)(uint16_t msg_id,
                                            uint16_t payload_len,
                                            const uint8_t *payload);

  /**
   * Target should call this API if it is unable to decode the
   * message received over UART
   */
  GSoundStatus (*gsound_bata_bad_rx)(const uint8_t *data,
                                     uint16_t len);

} GSoundBataInterface;

/**
 * Target should send `msg` over UART. Can be asynchronous.
 * This may be called from within `gsound_bata_msg_rx`.
 * This method will send bytes over the UART only if the logging is enabled
 * on a seperate UART (i.e. UART logging port is separate from the UART
 * command port). Otherwise, this method does nothing.
 *
 * param[in] msg: data to send over UART
 * param[in] len: length of `msg` in bytes
 */
GSoundStatus GSoundTargetBataSendBytes(const uint8_t *msg,
                                       uint16_t len);

/**
 * Target should log `msg` over UART. Can be asynchronous.
 * This may be called from within `gsound_bata_msg_rx`.
 * This method will send bytes alongside the existing logs and must be able
 * to send binary data including /x00.
 *
 * All the data shall be prefixed with '@bata\n' and end with '\r\n'
 *
 * param[in] msg: data to be logged over UART
 * param[in] len: length of `msg` in bytes
 */
GSoundStatus GSoundTargetBataLogBytes(const uint8_t *msg,
                                      uint16_t len);

/**
 *
 * param[in] handlers:     structure of callbacks for target to call to send
 *                         messages to GSound's test infrastructure over UART
 *
 * param[out] msg_buf_out:  buffer to be used by GSound when calling the above
 *                          callbacks to proto encode messages before sending
 *                          over UART
 *
 * param[out] msg_buf_len_out: length of `msg_buf` in bytes
 */
GSoundStatus GSoundTargetBataInit(const GSoundBataInterface *handlers,
                                  uint8_t  **msg_buf_out,
                                  uint32_t  *msg_buf_len_out);


#ifdef __cplusplus
}
#endif

#endif  // GSOUND_TARGET_BATA_H
