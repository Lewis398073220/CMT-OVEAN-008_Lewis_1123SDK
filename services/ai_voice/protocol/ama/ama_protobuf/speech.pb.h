/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6 */

#ifndef PB_SPEECH_PB_H_INCLUDED
#define PB_SPEECH_PB_H_INCLUDED
#include <pb_0_4_6.h>
#include "common.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _AudioProfile { 
    AudioProfile_CLOSE_TALK = 0, 
    AudioProfile_NEAR_FIELD = 1, 
    AudioProfile_FAR_FIELD = 2 
} AudioProfile;

typedef enum _AudioFormat { 
    AudioFormat_PCM_L16_16KHZ_MONO = 0, 
    AudioFormat_OPUS_16KHZ_32KBPS_CBR_0_20MS = 1, 
    AudioFormat_OPUS_16KHZ_16KBPS_CBR_0_20MS = 2, 
    AudioFormat_MSBC = 3 
} AudioFormat;

typedef enum _AudioSource { 
    AudioSource_STREAM = 0, 
    AudioSource_BLUETOOTH_SCO = 1 
} AudioSource;

typedef enum _SpeechState { 
    SpeechState_IDLE = 0, 
    SpeechState_LISTENING = 1, 
    SpeechState_PROCESSING = 2, 
    SpeechState_SPEAKING = 3 
} SpeechState;

typedef enum _SpeechInitiator_Type { 
    SpeechInitiator_Type_NONE = 0, 
    SpeechInitiator_Type_PRESS_AND_HOLD = 1, 
    SpeechInitiator_Type_TAP = 3, 
    SpeechInitiator_Type_WAKEWORD = 4 
} SpeechInitiator_Type;

/* Struct definitions */
typedef struct _Dialog { 
    uint32_t id;
} Dialog;

typedef struct _NotifySpeechState { 
    SpeechState state;
} NotifySpeechState;

typedef PB_BYTES_ARRAY_T(256) SpeechInitiator_WakeWord_metadata_t;
typedef struct _SpeechInitiator_WakeWord { 
    uint32_t start_index_in_samples;
    uint32_t end_index_in_samples;
    bool near_miss;
    SpeechInitiator_WakeWord_metadata_t metadata;
} SpeechInitiator_WakeWord;

typedef struct _SpeechSettings { 
    AudioProfile audio_profile;
    AudioFormat audio_format;
    AudioSource audio_source;
} SpeechSettings;

typedef struct _EndpointSpeech { 
    bool has_dialog;
    Dialog dialog;
} EndpointSpeech;

typedef struct _ProvideSpeech { 
    bool has_dialog;
    Dialog dialog;
} ProvideSpeech;

typedef struct _SpeechInitiator { 
    SpeechInitiator_Type type;
    bool has_wake_word;
    SpeechInitiator_WakeWord wake_word;
} SpeechInitiator;

typedef struct _SpeechProvider { 
    bool has_speech_settings;
    SpeechSettings speech_settings;
    bool has_dialog;
    Dialog dialog;
} SpeechProvider;

typedef struct _StopSpeech { 
    ErrorCode error_code;
    bool has_dialog;
    Dialog dialog;
} StopSpeech;

typedef struct _StartSpeech { 
    bool has_settings;
    SpeechSettings settings;
    bool has_initiator;
    SpeechInitiator initiator;
    bool has_dialog;
    Dialog dialog;
    bool suppressEndpointEarcon;
    bool suppressStartEarcon;
} StartSpeech;


/* Helper constants for enums */
#define _AudioProfile_MIN AudioProfile_CLOSE_TALK
#define _AudioProfile_MAX AudioProfile_FAR_FIELD
#define _AudioProfile_ARRAYSIZE ((AudioProfile)(AudioProfile_FAR_FIELD+1))

#define _AudioFormat_MIN AudioFormat_PCM_L16_16KHZ_MONO
#define _AudioFormat_MAX AudioFormat_MSBC
#define _AudioFormat_ARRAYSIZE ((AudioFormat)(AudioFormat_MSBC+1))

#define _AudioSource_MIN AudioSource_STREAM
#define _AudioSource_MAX AudioSource_BLUETOOTH_SCO
#define _AudioSource_ARRAYSIZE ((AudioSource)(AudioSource_BLUETOOTH_SCO+1))

#define _SpeechState_MIN SpeechState_IDLE
#define _SpeechState_MAX SpeechState_SPEAKING
#define _SpeechState_ARRAYSIZE ((SpeechState)(SpeechState_SPEAKING+1))

#define _SpeechInitiator_Type_MIN SpeechInitiator_Type_NONE
#define _SpeechInitiator_Type_MAX SpeechInitiator_Type_WAKEWORD
#define _SpeechInitiator_Type_ARRAYSIZE ((SpeechInitiator_Type)(SpeechInitiator_Type_WAKEWORD+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Dialog_init_default                      {0}
#define SpeechSettings_init_default              {_AudioProfile_MIN, _AudioFormat_MIN, _AudioSource_MIN}
#define SpeechInitiator_init_default             {_SpeechInitiator_Type_MIN, false, SpeechInitiator_WakeWord_init_default}
#define SpeechInitiator_WakeWord_init_default    {0, 0, 0, {0, {0}}}
#define StartSpeech_init_default                 {false, SpeechSettings_init_default, false, SpeechInitiator_init_default, false, Dialog_init_default, 0, 0}
#define SpeechProvider_init_default              {false, SpeechSettings_init_default, false, Dialog_init_default}
#define ProvideSpeech_init_default               {false, Dialog_init_default}
#define StopSpeech_init_default                  {_ErrorCode_MIN, false, Dialog_init_default}
#define EndpointSpeech_init_default              {false, Dialog_init_default}
#define NotifySpeechState_init_default           {_SpeechState_MIN}
#define Dialog_init_zero                         {0}
#define SpeechSettings_init_zero                 {_AudioProfile_MIN, _AudioFormat_MIN, _AudioSource_MIN}
#define SpeechInitiator_init_zero                {_SpeechInitiator_Type_MIN, false, SpeechInitiator_WakeWord_init_zero}
#define SpeechInitiator_WakeWord_init_zero       {0, 0, 0, {0, {0}}}
#define StartSpeech_init_zero                    {false, SpeechSettings_init_zero, false, SpeechInitiator_init_zero, false, Dialog_init_zero, 0, 0}
#define SpeechProvider_init_zero                 {false, SpeechSettings_init_zero, false, Dialog_init_zero}
#define ProvideSpeech_init_zero                  {false, Dialog_init_zero}
#define StopSpeech_init_zero                     {_ErrorCode_MIN, false, Dialog_init_zero}
#define EndpointSpeech_init_zero                 {false, Dialog_init_zero}
#define NotifySpeechState_init_zero              {_SpeechState_MIN}

/* Field tags (for use in manual encoding/decoding) */
#define Dialog_id_tag                            1
#define NotifySpeechState_state_tag              1
#define SpeechInitiator_WakeWord_start_index_in_samples_tag 1
#define SpeechInitiator_WakeWord_end_index_in_samples_tag 2
#define SpeechInitiator_WakeWord_near_miss_tag   3
#define SpeechInitiator_WakeWord_metadata_tag    4
#define SpeechSettings_audio_profile_tag         1
#define SpeechSettings_audio_format_tag          2
#define SpeechSettings_audio_source_tag          3
#define EndpointSpeech_dialog_tag                1
#define ProvideSpeech_dialog_tag                 1
#define SpeechInitiator_type_tag                 1
#define SpeechInitiator_wake_word_tag            2
#define SpeechProvider_speech_settings_tag       1
#define SpeechProvider_dialog_tag                2
#define StopSpeech_error_code_tag                1
#define StopSpeech_dialog_tag                    2
#define StartSpeech_settings_tag                 1
#define StartSpeech_initiator_tag                2
#define StartSpeech_dialog_tag                   3
#define StartSpeech_suppressEndpointEarcon_tag   4
#define StartSpeech_suppressStartEarcon_tag      5

/* Struct field encoding specification for nanopb */
#define Dialog_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1)
#define Dialog_CALLBACK NULL
#define Dialog_DEFAULT NULL

#define SpeechSettings_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    audio_profile,     1) \
X(a, STATIC,   SINGULAR, UENUM,    audio_format,      2) \
X(a, STATIC,   SINGULAR, UENUM,    audio_source,      3)
#define SpeechSettings_CALLBACK NULL
#define SpeechSettings_DEFAULT NULL

#define SpeechInitiator_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  wake_word,         2)
#define SpeechInitiator_CALLBACK NULL
#define SpeechInitiator_DEFAULT NULL
#define SpeechInitiator_wake_word_MSGTYPE SpeechInitiator_WakeWord

#define SpeechInitiator_WakeWord_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   start_index_in_samples,   1) \
X(a, STATIC,   SINGULAR, UINT32,   end_index_in_samples,   2) \
X(a, STATIC,   SINGULAR, BOOL,     near_miss,         3) \
X(a, STATIC,   SINGULAR, BYTES,    metadata,          4)
#define SpeechInitiator_WakeWord_CALLBACK NULL
#define SpeechInitiator_WakeWord_DEFAULT NULL

#define StartSpeech_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  settings,          1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  initiator,         2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dialog,            3) \
X(a, STATIC,   SINGULAR, BOOL,     suppressEndpointEarcon,   4) \
X(a, STATIC,   SINGULAR, BOOL,     suppressStartEarcon,   5)
#define StartSpeech_CALLBACK NULL
#define StartSpeech_DEFAULT NULL
#define StartSpeech_settings_MSGTYPE SpeechSettings
#define StartSpeech_initiator_MSGTYPE SpeechInitiator
#define StartSpeech_dialog_MSGTYPE Dialog

#define SpeechProvider_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  speech_settings,   1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dialog,            2)
#define SpeechProvider_CALLBACK NULL
#define SpeechProvider_DEFAULT NULL
#define SpeechProvider_speech_settings_MSGTYPE SpeechSettings
#define SpeechProvider_dialog_MSGTYPE Dialog

#define ProvideSpeech_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dialog,            1)
#define ProvideSpeech_CALLBACK NULL
#define ProvideSpeech_DEFAULT NULL
#define ProvideSpeech_dialog_MSGTYPE Dialog

#define StopSpeech_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    error_code,        1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dialog,            2)
#define StopSpeech_CALLBACK NULL
#define StopSpeech_DEFAULT NULL
#define StopSpeech_dialog_MSGTYPE Dialog

#define EndpointSpeech_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dialog,            1)
#define EndpointSpeech_CALLBACK NULL
#define EndpointSpeech_DEFAULT NULL
#define EndpointSpeech_dialog_MSGTYPE Dialog

#define NotifySpeechState_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    state,             1)
#define NotifySpeechState_CALLBACK NULL
#define NotifySpeechState_DEFAULT NULL

extern const pb_msgdesc_t Dialog_msg;
extern const pb_msgdesc_t SpeechSettings_msg;
extern const pb_msgdesc_t SpeechInitiator_msg;
extern const pb_msgdesc_t SpeechInitiator_WakeWord_msg;
extern const pb_msgdesc_t StartSpeech_msg;
extern const pb_msgdesc_t SpeechProvider_msg;
extern const pb_msgdesc_t ProvideSpeech_msg;
extern const pb_msgdesc_t StopSpeech_msg;
extern const pb_msgdesc_t EndpointSpeech_msg;
extern const pb_msgdesc_t NotifySpeechState_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Dialog_fields &Dialog_msg
#define SpeechSettings_fields &SpeechSettings_msg
#define SpeechInitiator_fields &SpeechInitiator_msg
#define SpeechInitiator_WakeWord_fields &SpeechInitiator_WakeWord_msg
#define StartSpeech_fields &StartSpeech_msg
#define SpeechProvider_fields &SpeechProvider_msg
#define ProvideSpeech_fields &ProvideSpeech_msg
#define StopSpeech_fields &StopSpeech_msg
#define EndpointSpeech_fields &EndpointSpeech_msg
#define NotifySpeechState_fields &NotifySpeechState_msg

/* Maximum encoded size of messages (where known) */
#define Dialog_size                              6
#define EndpointSpeech_size                      8
#define NotifySpeechState_size                   2
#define ProvideSpeech_size                       8
#define SpeechInitiator_WakeWord_size            273
#define SpeechInitiator_size                     278
#define SpeechProvider_size                      16
#define SpeechSettings_size                      6
#define StartSpeech_size                         301
#define StopSpeech_size                          10

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
