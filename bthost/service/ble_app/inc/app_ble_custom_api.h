/***************************************************************************
*
*Copyright 2015-2021 BES.
*All rights reserved. All unpublished rights reserved.
*
*No part of this work may be used or reproduced in any form or by any
*means, or stored in a database or retrieval system, without prior written
*permission of BES.
*
*Use of this work is governed by a license granted by BES.
*This work contains confidential and proprietary information of
*BES. which is protected by copyright, trade secret,
*trademark and other intellectual property rights.
*
****************************************************************************/

#ifndef __APP_BLE_CUSTOM_API_H__
#define __APP_BLE_CUSTOM_API_H__

/*****************************header include********************************/

/******************************macro defination*****************************/

/******************************type defination******************************/

#ifdef __cplusplus
extern "C" {
#endif

#include "ble_core_common.h"

typedef struct
{
    BLE_ADV_ACTIVITY_USER_E adv_actv_user;
    bool user_enable;
    BLE_ADV_USER_E adv_user;
    bool withFlags;
    /// Advertising filtering policy (@see enum adv_filter_policy)
    uint8_t filter_pol;
    BLE_ADV_TYPE_E advType;
    //advMode will be choose the legacy,extended or period adv (@see enum adv_mode)
    ADV_MODE_E advMode;
    uint32_t advUserInterval;
    /// only ADV_MODE_PERIODIC adv mode use
    uint32_t PeriodicIntervalMin;
    uint32_t PeriodicIntervalMax;
    uint8_t advDataLen;
    uint8_t advData[EXT_ADV_DATA_LEN];
    uint8_t scanRspDataLen;
    uint8_t scanRspData[EXT_ADV_DATA_LEN];
    uint8_t localAddrType;
    uint8_t localAddr[BTIF_BD_ADDR_SIZE];
    ble_bdaddr_t peerAddr;
} CUSTOMER_ADV_PARAM_T;

CUSTOMER_ADV_PARAM_T * app_ble_custom_adv_param_ptr(BLE_ADV_ACTIVITY_USER_E actv_user);

/*---------------------------------------------------------------------------
 *            app_ble_custom_adv_is_rpa
 *---------------------------------------------------------------------------
 *
 *Synopsis:
 *    Determine whether to use RPA
 *
 * Parameters:
 *    addr: BLE addr
 *
 * Return:
 *    USE RPA OR NOT
 */
bool app_ble_custom_adv_is_rpa(uint8_t *addr);

/*---------------------------------------------------------------------------
 *            app_ble_custom_adv_write_data
 *---------------------------------------------------------------------------
 *
 *Synopsis:
 *    write adv data of customer
 *
 * Parameters:
 *    actv_user: The user of the adv activity
 *    is_custom_adv_flags: If this flag was set, custom can set adv flag by himself
 *    type : adv addr type
 *               BLE_ADV_PUBLIC_STATIC   Don't care about local_addr, just use identity ble addr.
 *               BLE_ADV_PRIVATE_STATIC  Just use local_addr.
 *               BLE_ADV_RPA             local_addr shall be set to ff:ff:ff:ff:ff:ff. If the resolving list contains no matching entry, 
 *                                       use rpa generated by host;otherwise use rpa generated by control.
 *               !!!If wants to use rpa, the premise is to open the macro BLE_ADV_RPA_ENABLED
 *    local_addr: The local address of this adv. ff:ff:ff:ff:ff:ff when rpa.
 *    peer_addr: If adv_type is direct adv, this param is the address of peer ble
 *    adv_interval: Adv interval
 *    adv_type: Adv type
 *    adv_mode: Adv mode
 *    tx_power_dbm: Adv tx power in dbm, range: -3~16
 *    adv_data: Adv data
 *    adv_data_size: Adv data size
 *    scan_rsp_data: Scan response data
 *    scan_rsp_data_size: Scan response data size
 *
 * Return:
 *    None
 */
void app_ble_custom_adv_write_data(BLE_ADV_ACTIVITY_USER_E actv_user,
                    bool is_custom_adv_flags,
                    BLE_ADV_ADDR_TYPE_E type,
                    uint8_t *local_addr,
                    ble_bdaddr_t *peer_addr,
                    uint32_t adv_interval,
                    BLE_ADV_TYPE_E adv_type,
                    ADV_MODE_E adv_mode,
                    int8_t tx_power_dbm,
                    uint8_t *adv_data, uint8_t adv_data_size,
                    uint8_t *scan_rsp_data, uint8_t scan_rsp_data_size);

/*---------------------------------------------------------------------------
 *            app_ble_custom_adv_start
 *---------------------------------------------------------------------------
 *
 *Synopsis:
 *    for customer to start a adv
 *
 * Parameters:
 *    actv_user: The user of the adv activity
 *
 * Return:
 *    None
 */
void app_ble_custom_adv_start(BLE_ADV_ACTIVITY_USER_E actv_user);

/*---------------------------------------------------------------------------
 *            app_ble_custom_adv_start
 *---------------------------------------------------------------------------
 *
 *Synopsis:
 *    for customer to stop a adv
 *
 * Parameters:
 *    actv_user: The user of the adv activity
 *
 * Return:
 *    None
 */
void app_ble_custom_adv_stop(BLE_ADV_ACTIVITY_USER_E actv_user);

/*---------------------------------------------------------------------------
 *            app_ble_custom_init
 *---------------------------------------------------------------------------
 *
 *Synopsis:
 *    initialize app ble custom
 *
 * Parameters:
 *    void
 *
 * Return:
 *    None
 */
void app_ble_custom_init(void);


#ifdef __cplusplus
}
#endif

#endif /* #ifndef __APP_BLE_CUSTOM_API_H__ */

